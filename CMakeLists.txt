####################################################################################################
# CMakeLists file for Softcut
# Generated by Mads Kjeldgaard
# 2024-11-17
####################################################################################################

####################################################################################################
# basic project config
cmake_minimum_required(VERSION 3.12)
set(project_name "Softcut")
set(CMAKE_MODULE_PATH ${CMAKE_SOURCE_DIR}/cmake_modules ${CMAKE_MODULE_PATH})
set(CMAKE_CXX_STANDARD 17)

# compile commands
set(CMAKE_EXPORT_COMPILE_COMMANDS ON)

# Load cpm
include(cmake_modules/CPM.cmake)

# Download softcut https://github.com/monome/softcut-lib, latest commit
CPMAddPackage("gh:monome/softcut-lib#main")

# If SC_PATH variable is not set, download supercollider source via CPM and set SC_PATH variable
# Download supercollider source and set the SC_PATH variable
if(NOT DEFINED SC_PATH)
  message(STATUS "SC_PATH not set, downloading SuperCollider source")
  CPMAddPackage(
    NAME SuperCollider
    GITHUB_REPOSITORY supercollider/supercollider
    GIT_TAG develop
    DOWNLOAD_ONLY TRUE
  )
  set(SC_PATH ${SuperCollider_SOURCE_DIR})
endif()

# If install path is not set, set it to a platform specific default
if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)

  if(APPLE)
    set(CMAKE_INSTALL_PREFIX "/Library/Application Support/SuperCollider/Extensions/" CACHE PATH "Install prefix" FORCE)
    message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

    # On linux it's /usr/share/SuperCollider/Extensions/
  elseif(UNIX)
      set(CMAKE_INSTALL_PREFIX "/usr/share/SuperCollider/Extensions/" CACHE PATH "Install prefix" FORCE)
    # TODO: Windows
  else()
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
  endif()
endif()


####################################################################################################
# load modules
include(SuperColliderServerPlugin RESULT_VARIABLE server_plugin_found)
if(NOT server_plugin_found)
    message(FATAL_ERROR "Could not find server plugin functions module")
endif()

include(SuperColliderCompilerConfig RESULT_VARIABLE compiler_config_found)
if(NOT compiler_config_found)
    message(FATAL_ERROR "Could not find compiler config module")
endif()

# Windows - puts redistributable DLLs in install directory
include(InstallRequiredSystemLibraries)

sc_check_sc_path("${SC_PATH}")
message(STATUS "Found SuperCollider: ${SC_PATH}")
set(SC_PATH "${SC_PATH}" CACHE PATH
    "Path to SuperCollider source. Relative paths are treated as relative to this script" FORCE)

include("${SC_PATH}/SCVersion.txt")
message(STATUS "Building plugins for SuperCollider version: ${SC_VERSION}")

# set project here to avoid SCVersion.txt clobbering our version info
project(${project_name})
sc_do_initial_compiler_config() # do after setting project so compiler ID is available

if(CMAKE_INSTALL_PREFIX_INITIALIZED_TO_DEFAULT OR NOT CMAKE_INSTALL_PREFIX)
    message(WARNING "No install prefix provided, defaulting to $BUILD_DIR/install")
    set(CMAKE_INSTALL_PREFIX "${CMAKE_BINARY_DIR}/install" CACHE PATH "Install prefix" FORCE)
endif()

message(STATUS "Install directory set to: ${CMAKE_INSTALL_PREFIX}")

####################################################################################################
# options
option(SUPERNOVA "Build plugins for supernova" OFF)
option(SCSYNTH "Build plugins for scsynth" ON)
option(NATIVE "Optimize for native architecture" OFF)
option(STRICT "Use strict warning flags" OFF)
option(NOVA_SIMD "Build plugins with nova-simd support." ON)

if (NOVA_SIMD)
	add_definitions(-DNOVA_SIMD)
	include_directories(${SC_PATH}/external_libraries/nova-simd)
endif()

set(Softcut_cpp_files
    plugins/Softcut/Softcut.hpp
    plugins/Softcut/Softcut.cpp
)
set(Softcut_sc_files
    plugins/Softcut/Softcut.sc
)
set(Softcut_schelp_files
    plugins/Softcut/Softcut.schelp
)

sc_add_server_plugin(
    "Softcut/Softcut" # desination directory
    "Softcut" # target name
    "${Softcut_cpp_files}"
    "${Softcut_sc_files}"
    "${Softcut_schelp_files}"
)

# Link with softcut library
target_link_libraries("Softcut_scsynth" PRIVATE softcut)
set(softcutIncludePath ${softcut_SOURCE_DIR}/include)
message(STATUS "Including softcut headers at ${softcutIncludePath}")
target_include_directories("Softcut_scsynth" PRIVATE ${softcutIncludePath})

message(STATUS "Generating plugin targets done")
